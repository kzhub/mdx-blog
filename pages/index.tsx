import Head from "next/head";
import fs from 'fs'
import Link from "next/link";
import { Text, Heading, Center, Box, Icon, Flex, Spacer } from "@chakra-ui/react";
import { SearchIcon } from "@chakra-ui/icons";
import { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react'
import Article from "@/components/Article";

export default function Home({ data }: { data: Array<any> }) {
	// „Ç´„ÉÜ„Ç¥„É™„ÅÆÂèñÂæó
	const cats: Array<String> = []
	data.map((cat) => (
		cats.push(...cat?.tags)
	))
	const catResult: any = new Set(cats)
	const catArray: Array<String> = [...catResult]

	// const Articles:object = {...data}



	return (
		<>
			<Head>
				<title>ü¶ñ</title>
				<meta name="description" content="Generated by next.js" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Heading as='h1' fontSize={64} mt='24px'>
				<Link href='/'>
					<Center>
						ü¶ñüêï
					</Center>
				</Link>
			</Heading>
			<Center>
				<Text fontSize='8px' color='blackAlpha.300'>
					Music Gadget Tech
				</Text>
			</Center>

			<Box bg='' maxW='453px' h='100%' color='#1D4044' m='0 auto' px='10px'>
				<Tabs variant='soft-rounded' colorScheme='teal'>
					<Flex mt='32px'>
						<Box>
							<TabList>
								<Tab>All</Tab>
								{catArray.map((node) => (
									<Tab key={`${node}`}>{node}</Tab>
								))}
							</TabList>
						</Box>
						<Spacer />
						<Center>
							<Icon boxSize='16px' as={SearchIcon} mr='8px' />
						</Center>
					</Flex>

					<TabPanels>
						<TabPanel>
							<Article propData={data} />
						</TabPanel>

						{/* {catArray.map((node) => (
							filterFunction
						))} */}

						{/* {catArray.map(function (value) {
							const result = data.filter(function(node) {
								console.log(value)
								if(node.tags.indexOf(value) === 1){
									return true
								}
							})
							let a =[...result]
						})} */}

						{catArray.map(function (value) {
							console.log(value)
							const result = data.filter(function(data){
								if(data.tags.includes(value) === true){
									return true
								}
							})
							const newArray = [...result]

							return (
								<TabPanel key='value'>
									<p>{value}</p>
									<Article propData={newArray} />
								</TabPanel>
							)
						})} 


						{/* {catArray.map((node) => (
							<TabPanel>
								<Article propData= {data} />
							</TabPanel>
						))} */}


					</TabPanels>
				</Tabs>

			</Box>


			{/* <Box bg='' maxW='453px' h='100%' color='#1D4044' m='0 auto' px='10px'>
					<Flex mt='32px'>
						<Center>
							<HStack spacing={4} mt='16px' mb='16px'>
								<Tag size='sm' key='sm' variant='solid' colorScheme='teal' >
									<TagLeftIcon boxSize='12px' as={AddIcon} />
									<TagLabel>CHORD</TagLabel>
								</Tag>
								<Tag size='sm' key='sm' variant='solid'>
									<TagLeftIcon boxSize='12px' as={AddIcon} />
									<TagLabel>TS</TagLabel>
								</Tag>
								<Tag size='sm' key='sm' variant='solid'>
									<TagLeftIcon boxSize='12px' as={AddIcon} />
									<TagLabel>BLOG</TagLabel>
								</Tag>
							</HStack>
						</Center>
						<Spacer />
						<Center>
							<Icon boxSize='16px' as={SearchIcon} mr='8px' />
						</Center>
					</Flex>

					<ul>
						{data.map((item) => (
							<li key={item.id}>
								<Link href={`/posts/${item.id}`}>
									<Heading as='h3' size='s' noOfLines={1}
										color='#4A5568'
										mt='24px'
									>
										<Icon boxSize='12px' as={LinkIcon} mr='8px' />
										{item.title}
									</Heading>
									<Text fontSize='10px'>{item.date}</Text>
								</Link>
							</li>
						))}
					</ul>
				</Box> */}
		</>
	);
}



export async function getStaticProps() {
	const path = require('path')
	const mdxFileNames: Array<String> = fs.readdirSync(path.resolve(".", "pages", "posts"))

	const fileObject = mdxFileNames.map((fileName) => {
		const { meta } = require(`./posts/${fileName}`)
		return {
			...meta,
			id: fileName.replace(/.mdx$/, "")
		}
	})
		.sort(function (a, b) {
			return (
				(a.date < b.date) ? 1 : -1
			)
		})

	return {
		props: {
			data: fileObject
		},
	};
}
