import Head from "next/head";
import fs from 'fs'
import Link from "next/link";
import { Text, Heading, Center, Box, Icon, Flex, Spacer } from "@chakra-ui/react";
import { SearchIcon } from "@chakra-ui/icons";
import { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react'
import Article from "@/components/Article";
import { useState } from "react";

// 以下はコンポーネントにまとめる
import { useDisclosure } from "@chakra-ui/react";
import {
	Modal,
	ModalOverlay,
	ModalContent,
	InputGroup,
	ModalBody,
	Input,
	InputLeftElement
} from '@chakra-ui/react'
import { afterEach } from "node:test";

export default function Home({ data }: { data: Array<any> }) {
	// カテゴリの取得
	const cats: Array<String> = []
	data.map((cat) => (
		cats.push(...cat?.tags)
	))
	const catResult: any = new Set(cats)
	const catArray: Array<String> = [...catResult]

	const { isOpen, onOpen, onClose } = useDisclosure()

// for search 
	const [searchObject, setSearchObject] = useState([])


	
	
	const objectSeatch = (searchWord:string) => {
		const searchResultObjects = data.filter(function (article) {
			if(article.title.includes(searchWord) === true){
				return true
			}
		})
		const arraySearchResult:Array<object> = [...searchResultObjects]
		// console.log(arraySearchResult)
		setSearchObject(arraySearchResult)
	}

	const getInputFunction = (inputValue:string) => {
		if(inputValue.length > 1){
			objectSeatch(inputValue)
		}else{
			setSearchObject([])
		}
	}
	
	// モーダルクリック時
	const openModalCustom = () => {
		setSearchObject([])	//初期値にもどす
		onOpen()//モーダルを開くコールバック関数
	}
	
	

	return (
		<>
			<Head>
				<title>🦖</title>
				<meta name="description" content="Generated by next.js" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Heading as='h1' fontSize={64} mt='24px'>
				<Link href='/'>
					<Center>
						🦖🐕
					</Center>
				</Link>
			</Heading>
			<Center>
				<Text fontSize='8px' color='blackAlpha.300'>
					Music Gadget Tech
				</Text>
			</Center>

			<Modal isOpen={isOpen} onClose={onClose}>
				<ModalOverlay />
				<ModalContent>
					<ModalBody p="0">
						<InputGroup>
							<InputLeftElement
								pointerEvents='none'
								children={<SearchIcon color='gray.300' />}
							/>
							<Input
								placeholder='Search article'
								focusBorderColor='teal.400'
								_placeholder={{ opacity: 0.4, color: 'inherit' }}
								color='teal'
								onChange={(ev) => getInputFunction(ev.target.value)}
							/>
						</InputGroup>
						<Box px="16px">
							<Article propData={searchObject} />	
						</Box>

					</ModalBody>

				</ModalContent>
			</Modal>

			<Box bg='' maxW='453px' h='100%' color='#1D4044' m='0 auto' px='10px'>
				<Tabs variant='soft-rounded' colorScheme='teal'>
					<Flex mt='32px'>
						<Box>
							<TabList>
								<Tab>All</Tab>
								{catArray.map((node) => (
									<Tab key={`${node}`}>{node}</Tab>
								))}
							</TabList>
						</Box>
						<Spacer />
						<Center cursor='pointer' onClick={openModalCustom}>
							<Icon boxSize='16px' as={SearchIcon} mr='8px' />
						</Center>
					</Flex>

					<TabPanels>
						<TabPanel>
							<Article propData={data} />
						</TabPanel>

						{catArray.map(function (value) {
							// console.log(value)
							const result = data.filter(function (data) {
								if (data.tags.includes(value) === true) {
									return true
								}
							})
							const newArray = [...result]

							return (
								<TabPanel key='value'>
									<p>{value}</p>
									<Article propData={newArray} />
								</TabPanel>
							)
						})}

					</TabPanels>
				</Tabs>

			</Box>
		</>
	);
}



export async function getStaticProps() {
	const path = require('path')
	const mdxFileNames: Array<String> = fs.readdirSync(path.resolve(".", "pages", "posts"))

	const fileObject = mdxFileNames.map((fileName) => {
		const { meta } = require(`./posts/${fileName}`)
		return {
			...meta,
			id: fileName.replace(/.mdx$/, "")
		}
	})
		.sort(function (a, b) {
			return (
				(a.date < b.date) ? 1 : -1
			)
		})

	return {
		props: {
			data: fileObject
		},
	};
}
