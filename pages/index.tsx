import Head from "next/head";
import fs from 'fs'

import SearchModal from "@/components/SearchModal";
import {
	Box, 
	Flex, 
	Spacer, 
	Tabs, 
	TabList, 
	TabPanels,
	Tab, 
	TabPanel,
} from '@chakra-ui/react'
import Article from "@/components/Article";
import ArticleComments from "@/components/ArticleComments";
import { useEffect,useState } from "react";

type articleObjectType = {
	data: String,
	id: String,
	imgUrl:String,
	link:String,
	outline:String,
	tags:String[]
	title:String,
}
export default function Home({ data }: { data: Array<articleObjectType> }) {
	const cats: String[] = []
	data.map((cat) => (
		cats.push(...cat?.tags)
	))
	const catArray:String[]= Array.from(new Set(cats))

	const [comments, setComments] = useState([{"articleId":1,"comments":[{"comment":"„Ç≥„É°„É≥„Éà1","userName":"„É¶„Éº„Ç∂„Éº„Éç„Éº„É†"},{"comment":"„Ç≥„É°„É≥„Éà2","userName":"„É¶„Éº„Ç∂„Éº„Éç„Éº„É†2"}]},{"articleId":2,"comments":[{"comment":"„Ç≥„É°„É≥„Éà3","userName":"„É¶„Éº„Ç∂„Éº„Éç„Éº„É†3"}]}])
	
	return (
		<>
			<Head>
				<title>ü¶ñ</title>
				<meta name="description" content="Generated by next.js" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<h2>
					article1 comment
				</h2>
				<ul>
				{comments[0].comments.map((node) => (
						<li>
							<p>{node.userName}</p>
							<p>{node.comment}</p>
						</li>
					))}
				</ul>

				<Tabs variant='soft-rounded' colorScheme='teal'>
					<Flex> 
						<Box>
							<TabList>
								<Tab>All</Tab>
								{catArray.map((node) => (
									<Tab key={`${node}`}>{node}</Tab>
								))}
							</TabList>
						</Box>
						<Spacer />

						<SearchModal data={data} />

					</Flex>

					<TabPanels>
						<TabPanel>
							<Article propData={data} />
						</TabPanel>

						{catArray.map(function (value) {
							const result = data.filter(function (data) {
								if (data.tags.includes(value) === true) {
									return true
								}
							})
							const newArray = [...result]

							return (
								<TabPanel key='value'>
									<Article propData={newArray} />
								</TabPanel>
							)
						})}
					</TabPanels>
				</Tabs>


		</>
	);
}

export async function getStaticProps() {
	const path = require('path')
	const mdxFileNames: Array<String> = fs.readdirSync(path.resolve(".", "pages", "posts"))

	const fileObject = mdxFileNames.map((fileName) => {
		const { meta } = require(`./posts/${fileName}`)
		return {
			...meta,
			id: fileName.replace(/.mdx$/, "")
		}
	})
		.sort(function (a, b) {
			return (
				(a.date < b.date) ? 1 : -1
			)
		})

	return {
		props: {
			data: fileObject,
		},
	};
}
