import Head from "next/head";
import Image from "next/image";
import fs from 'fs'
import Link from "next/link";
import { useState } from "react";
import { Tag, HStack, TagLeftIcon, TagLabel, Text, Heading, Center, Box } from "@chakra-ui/react";
import { AddIcon } from "@chakra-ui/icons";


export default function Home({ data }: { data: Array<any> }) {

	// use State
	// const [viewArticles, setArticle] = useState(data)

	// カテゴリの取得
	const cats: Array<String> = []
	data.map((cat) => (
		cats.push(...cat?.tags)
	))
	const catResult = new Set(cats)
	// カテゴリの取得



	return (
		<>
			<Head>
				<title>🦖</title>
				<meta name="description" content="Generated by next.js" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div>
				<Heading as='h1' fontSize={64}>
					<Link href='/'>
						<Center>
							🐶
						</Center>
					</Link>
				</Heading>

				<Box bg='' maxW='720px' h='100%' color='#1D4044' m='0 auto' px='10px'>
					<Heading as='h2' size='xl' noOfLines={1} color='#ce2029'
						mt='32px'
					>
						Article
					</Heading>
					<HStack spacing={4} mt='16px' mb='32px'>
						<Tag size='sm' key='sm' variant='subtle' colorScheme='cyan'>
							<TagLeftIcon boxSize='12px' as={AddIcon} />
							<TagLabel>Cyan</TagLabel>
						</Tag>
					</HStack>

					<ul>
						{/* {data.map(item => item.title)} */}
						{data.map((item) => (
							<li key={item.id}>
								<Link href={`/posts/${item.id}`}>
									<Heading as='h3' size='s' noOfLines={1} 
										color='#4A5568'
										mt='24px'
									>
										{item.title}
									</Heading>
									<span>{item.date}</span>
								</Link>
							</li>
						))}
					</ul>
				</Box>
			</div>
		</>
	);
}



export async function getStaticProps() {
	const path = require('path')
	const mdxFileNames: Array<String> = fs.readdirSync(path.resolve(".", "pages", "posts"))

	const fileObject = mdxFileNames.map((fileName) => {
		const { meta } = require(`./posts/${fileName}`)
		return {
			...meta,
			id: fileName.replace(/.mdx$/, "")
		}
	})
		.sort(function (a, b) {
			return (
				(a.date < b.date) ? 1 : -1
			)
		})

	return {
		props: {
			data: fileObject
		},
	};
}
